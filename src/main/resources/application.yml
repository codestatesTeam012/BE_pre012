spring:
  h2:
    console:
      enabled: true
      path: /h2
  datasource:
    url: jdbc:mysql://admin.cy6doy34twwm.ap-northeast-2.rds.amazonaws.com/team012?useSSL=false&characterEncoding=UTF-8&serverTimezone=Asia/Seoul
    username: admin
    password:
    driver-class-name: com.mysql.cj.jdbc.Driver


#      url: jdbc:h2:mem:test  # h2
#  admin.cy6doy34twwm.ap-northeast-2.rds.amazonaws.com

  security:
    oauth2:
      client:
        registration:
          google:
            clientId: 1010624317453-6u6onrep82sdpiomt1p063p2g2n6m39t.apps.googleusercontent.com
            clientSecret: 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
            scope:
              - email
              - profile

          facebook:
            clientId: 1770633493275775
            clientSecret: bcb3dbbe98b00d28a442ab603e101199
            scope:
              - email
              - public_profile

          naver:
            client-id: cf_8fRJgqbQmOx2G9zRq
            client-secret: mBooS0m2en
            scope:
              - name
              - email
            client-name: Naver
            authorization-grant-type: authorization_code
            redirect-uri: http://localhost:8080/login/oauth2/code/naver

        provider:
          naver:
            authorization-uri: http://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response #?? ??? json?? ??? response?? ???? ???? ????.

  jpa:
    hibernate:
      ddl-auto: create  # (1) ??? ?? ??
    show-sql: true      # (2) SQL ?? ??
    properties:
      hibernate:
        format_sql: true  # (3) SQL pretty print

  sql:
    init:
      data-locations: classpath*:db/h2/data.sql

logging:
  level:
    org:
      springframework:
        orm:
          jpa: DEBUG

server:
  servlet:
    encoding:
      force-response: true